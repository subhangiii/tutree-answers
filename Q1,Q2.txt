Q1- Find the smallest and second smallest elements in an array.

Explanation- Write an efficient C program to find smallest and second smallest element in an array

Example:

Input: arr[] = {12, 13, 1, 10, 34, 1}
Output: The smallest element is 1 and
second Smallest element is 10


Ans:

#include<stdio.h>
#include<iostream.h>

void swap(int *x, int *y) 
{ 
    int temp = *x; 
    *x = *y; 
    *y = temp; 
} 

void sort(int arr[], int n) 
{ 
   int i, j; 
   bool swapped; 
   for (i = 0; i < n-1; i++) 
   { 
     swapped = false; 
     for (j = 0; j < n-i-1; j++) 
     { 
        if (arr[j] > arr[j+1]) 
        { 
           swap(&arr[j], &arr[j+1]); 
           swapped = true; 
        } 
     } 
     if (swapped == false) 
        break; 
   } 
} 
  


int main()
{
	int N, a[100];
	cout<<"Enter number of elements: ";
	cin>>N;
	cout<<"Enter elements: "
	for(int i=0; i<N; i++ )
		cin>>a[i];
	sort(a[],N);
	cout<<"Smallest number: "<<a[0]<<endl;
	cout<<"Second Smallest number: "<<a[1]<<endl;
	return 0;
}




Q2-Find median in a stream of integers (running integers)

Explanation-
Given that integers are read from a data stream. Find median of elements read so for in efficient way. For simplicity assume there are no duplicates. For example, let us consider the stream 5, 15, 1, 3 â€¦

After reading 1st element of stream - 5 -> median - 5
After reading 2nd element of stream - 5, 15 -> median - 10
After reading 3rd element of stream - 5, 15, 1 -> median - 5
After reading 4th element of stream - 5, 15, 1, 3 -> median - 4, so on...


Ans:
#include<stdio.h>
int main()
{
	int x, sum = 0; ctr = 0; median;
	char ans;
	while(ans!='n'||ans!='N')
	{
		cout<<"Enter element: ";
		cin>>x;
		ctr++;
		sum = sum + x;
		median = sum/ctr;
		cout<<"Median: "<<median;
		cout<<"Do you want to add more elements?";
		cin>>ans;
		
	}
	return 0;
}